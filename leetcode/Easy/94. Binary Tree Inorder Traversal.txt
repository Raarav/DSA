Q->https://leetcode.com/problems/binary-tree-inorder-traversal/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    private List<Integer> inorder(List<Integer> result, TreeNode root){
        if(root == null) return result;
        
        inorder(result, root.left);
        result.add(root.val);
        inorder(result, root.right);
        return result;
    }
    
    //optimise
    public List<Integer> inorderTraversal(TreeNode root){
        List<Integer> result = new ArrayList<>();
        if(root == null) return result;
        return inorder(result, root);
    }
    
    //mine
//     public List<Integer> inorderTraversal(TreeNode root) {
//         List<Integer> result = new ArrayList<>();
        
//         Stack<TreeNode> st = new Stack<>();
//         TreeNode cur = root;
        
//         while(cur != null || !st.empty()){
//             while(cur != null){
//                 st.add(cur);
//                 cur=cur.left;
//             }
//             cur = st.pop();
//             result.add(cur.val);
//             cur = cur.right;            
//         }
//         return result;
//     }
}